import sqlite3
import csv

def create_table():
    connection_obj = sqlite3.connect('weapon.db')
    cursor_obj = connection_obj.cursor()
    cursor_obj.execute("DROP TABLE IF EXISTS WEAPON")
    weapon_table = """ 
        CREATE TABLE WEAPON (
        name CHAR(255) NOT NULL,
        weapon_type CHAR(25) NOT NULL,
        raw_attack INT,
        affinity INT,
        element INT,
        status INT,
        type CHAR(25) NOT NULL,
        sub_type CHAR(25) NOT NULL,
        sharpness INT,
        esharpness INT,
        slots CHAR(5) NOT NULL,
        rampage_slots INT
        );
    """
    cursor_obj.execute(weapon_table)
    print('Weapon Table is ready')
    connection_obj.close()


    connection_obj_3 = sqlite3.connect('skills.db')
    cursor_obj_3 = connection_obj_3.cursor()
    cursor_obj_3.execute("DROP TABLE IF EXISTS SKILLS")
    skills_table = """ 
        CREATE TABLE SKILLS (
        name CHAR(25) NOT NULL,
        type CHAR(25) NOT NULL,
        attack_boost_mod INT,
        attack_boost_flat INT,
        crit_boost INT,
        element_boost_mod INT,
        element_boost_flat INT,
        element_type CHAR(25),
        element_crit_boost INT, 
        affinity_boost INT,
        status_mod INT,
        status_flat INT,
        status_type CHAR(25),
        handicraft_units INT,
        defense_boost_mod INT,
        defense_boost_flat INT,
        elemental_resistance INT,
        elemental_resistance_type CHAR(25) 
        );
    """
    cursor_obj_3.execute(skills_table)
    print('Skill Table is ready')
    connection_obj_3.close()

    connection_obj_4 = sqlite3.connect('monster.db')
    cursor_obj_4 = connection_obj_4.cursor()
    cursor_obj_4.execute("DROP TABLE IF EXISTS MONSTER")
    monster_table = """ 
               CREATE TABLE MONSTER (
               name CHAR(255) NOT NULL,
               part CHAR(25) NOT NULL,
               cut INT,
               blunt INT,
               pierce INT,
               fire_def INT,
               water_def INT,
               ice_def INT,
               thunder_def INT,
               dragon_def INT,
               ko INT
               );
           """
    cursor_obj_4.execute(monster_table)
    print('Monster Table is ready')
    connection_obj_4.close()

    connection_obj_5 = sqlite3.connect('motion.db')
    cursor_obj_5 = connection_obj_5.cursor()
    cursor_obj_5.execute("DROP TABLE IF EXISTS MOTION")
    motion_table = """ 
               CREATE TABLE MOTION (
               weapon CHAR (25) NOT NULL,
               move_name CHAR(255) NOT NULL,
               damage_type NOT NULL,
               raw INT,
               element INT, 
               status INT,
               part_continue INT,
               stun INT, 
               exhaust INT,
               mount INT,
               misc INT
               );
           """
    cursor_obj_5.execute(motion_table)
    print('Motion Table is ready')
    connection_obj_5.close()
    return 0


def load_table():
    connection_obj = sqlite3.connect('weapon.db')
    cursor_obj = connection_obj.cursor()
    with open("weapon.csv", 'r') as file:
        csvreader = csv.reader(file)
        for row1 in csvreader:
            print(row1)
            name = row1[0]
            weapon_type = row1[1]
            raw_attack = row1[2]
            affinity = row1[3]
            element = row1[4]
            status = row1[5]
            element_type = row1[6]
            sub_type = row1[7]
            sharpness = row1[8]
            esharpness = row1[9]
            slots = row1[10]
            rampage_slots = row1[11]
            cursor_obj.execute("INSERT INTO weapon (""name, weapon_type, raw_attack, affinity, element, status,"
                               "type, sub_type, sharpness, esharpness, slots, rampage_slots)"
                               "VALUES (?,?,?,?,?,?,?,?,?,?,?,?)",
                               (name, weapon_type, raw_attack, affinity, element, status,
                                element_type, sub_type, sharpness, esharpness, slots, rampage_slots))
    connection_obj.commit()
    connection_obj.close()

    connection_obj_2 = sqlite3.connect('motion.db')
    cursor_obj_2 = connection_obj_2.cursor()
    with open("motions.csv", 'r') as file:
        csvreader_2 = csv.reader(file)
        for row2 in csvreader_2:
            print(row2)
            weapon = row2[0]
            move_name = row2[1]
            damage_type = row2[2]
            raw = row2[3]
            element = row2[4]
            status = row2[5]
            part_continue = row2[6]
            stun = row2[7]
            exhaust = row2[8]
            mount = row2[9]
            misc = row2[10]
            cursor_obj_2.execute("INSERT INTO motion (""weapon, move_name, damage_type, raw, element, status,"
                               "part_continue, stun, exhaust, mount, misc)"
                               "VALUES (?,?,?,?,?,?,?,?,?,?,?)",
                               (weapon, move_name, damage_type, raw, element, status,
                                part_continue, stun, exhaust, mount, misc))
    connection_obj_2.commit()
    connection_obj_2.close()

    connection_obj_3 = sqlite3.connect('monster.db')
    cursor_obj_3 = connection_obj_3.cursor()
    with open("monster.csv", 'r') as file:
        csvreader_3 = csv.reader(file)
        for row3 in csvreader_3:
            print(row3)
            name = row3[0]
            part = row3[1]
            cut = row3[2]
            blunt = row3[3]
            pierce = row3[4]
            fire_def = row3[5]
            water_def = row3[6]
            ice_def = row3[7]
            thunder_def = row3[8]
            dragon_def = row3[9]
            ko = row3[10]
            cursor_obj_3.execute("INSERT INTO monster (""name, part, cut, blunt, pierce, fire_def,"
                "water_def, ice_def, thunder_def, dragon_def, ko)"
                    "VALUES (?,?,?,?,?,?,?,?,?,?,?)",
                        (name, part, cut, blunt, pierce, fire_def,
                            water_def, ice_def, thunder_def, dragon_def, ko))
    connection_obj_3.commit()
    connection_obj_3.close()

    connection_obj_4 = sqlite3.connect('skills.db')
    cursor_obj_4 = connection_obj_4.cursor()
    with open("skills.csv", 'r') as file:
        csvreader_4 = csv.reader(file)
        for row4 in csvreader_4:
            print(row4)
            skill_name = row4[0]
            skill_type = row4[1]
            attack_boost_mod = row4[2]
            attack_boost_flat = row4[3]
            crit_boost = row4[4]
            element_boost_mod = row4[5]
            element_boost_flat = row4[6]
            element_type = row4[7]
            element_crit_boost = row4[8]
            affinity_boost = row4[9]
            status_mod = row4[10]
            status_flat = row4[11]
            status_type = row4[12]
            handicraft_units = row4[13]
            defense_boost_mod = row4[14]
            defense_boost_flat = row4[15]
            elemental_resistance = row4[16]
            elemental_resistance_type = row4[17]
            cursor_obj_4.execute("INSERT INTO skills (""name, type, attack_boost_mod, attack_boost_flat, crit_boost,"
                                 "element_boost_mod, element_boost_flat, element_type, element_crit_boost, affinity_boost,"
                                 "status_mod, status_flat, status_type, handicraft_units, defense_boost_mod, "
                                 "defense_boost_flat, elemental_resistance, elemental_resistance_type)"
                                 "VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)",
                                 (skill_name, skill_type, attack_boost_mod, attack_boost_flat, crit_boost, element_boost_mod,
                                  element_boost_flat, element_type, element_crit_boost, affinity_boost, status_mod, status_flat,
                                  status_type, handicraft_units, defense_boost_mod, defense_boost_flat, elemental_resistance,
                                  elemental_resistance_type))
    connection_obj_4.commit()
    connection_obj_4.close()
    return 0


def call(database, table, name, second_name):
    array = []
    connection_obj = sqlite3.connect(database)
    cur = connection_obj.cursor()
    if table  == 'weapon':
        cur.execute("SELECT * FROM weapon WHERE name = (?)", (name,))
    elif table  == 'motion':
        cur.execute("SELECT * FROM motion WHERE move_name = (?)", (name,))
    elif table == 'monster':
        cur.execute("SELECT * FROM monster WHERE name = (?) AND part = (?)", (name, second_name))
    elif table == 'skills':
        cur.execute("SELECT * FROM skills WHERE name = (?)", (name,))
    else:
        print('Invalid table name. Try again\n')
    rows = cur.fetchall()
    for row in rows:
        array = row
    connection_obj.close()
    return array


def damage_calc(weapon_name, motion_name, monster_name, part, skill_names):
    crit_mod = 0.25
    ecrit_mod = 0
    skill_values = []
    name, weapon_type, attack, affinity, element, status, element_type, \
    subtype, sharpness, esharpness, slots, rampage = \
        call('weapon.db', 'weapon', weapon_name, 'none')

    weapon_type, move_name, damage_type, raw, element_mod, \
    status_mod, part_continue, stun, exhaust, mount, misc = \
        call('motion.db', 'motion', motion_name, 'none')

    mon_name, hitzone, cut, blunt, pierce, fire, water, ice, thunder, dragon, ko = \
        call('monster.db', 'monster', monster_name, part)

    if damage_type == 'cut':
        damage_resist = cut
    elif damage_type == 'blunt':
        damage_resist = blunt
    elif damage_type == 'pierce':
        damage_resist = pierce
    else:
        damage_resist = 1

    if element_type == 'fire':
        element_resist = fire
    elif element_type == 'water':
        element_resist = water
    elif element_type == 'ice':
        element_resist = ice
    elif element_type == 'thunder':
        element_resist = thunder
    elif element_type == 'dragon':
        element_resist = dragon
    else:
        element_resist = 1
    if skill_names != 'none':
        for i in range(len(skill_names)):
            skill_values = \
                call('skills.db', 'skills', skill_names[i], 'none')
            skill_name = skill_values[0]
            skill_type = skill_values[1]
            attack_boost_mod = skill_values[2]
            attack_boost_flat = skill_values[3]
            crit_boost = skill_values[4]
            element_boost_mod = skill_values[5]
            element_boost_flat = skill_values[6]
            element_type = skill_values[7]
            element_crit_boost = skill_values[8]
            affinity_boost = skill_values[9]
            status_mod = skill_values[10]
            status_flat = skill_values[11]
            status_type = skill_values[12]
            handicraft_units = skill_values[13]
            defense_boost_mod = skill_values[14]
            defense_boost_flat = skill_values[15]
            elemental_resistance = skill_values[16]
            elemental_resistance_type = skill_values[17]

            attack = (attack * attack_boost_mod) + attack_boost_flat
            element = (element * element_boost_mod) + element_boost_flat
            affinity = affinity + affinity_boost
            crit_mod = crit_boost
            ecrit_mod = element_crit_boost

    raw_damage = float(attack) * (1 + float(crit_mod) * float(affinity / 100)) * float(raw / 100) * float(sharpness) * float(damage_resist / 100)
    element_damage = float(element) * (1 + (float(ecrit_mod) * float(affinity/ 100))) * float(element_mod) * float(esharpness) * float(element_resist / 100)
    damage = raw_damage + element_damage
    print("Motion Damage is: ", int(damage))
    return damage

# main
main = 0
values_flag = 0
skills_flag = 0
loops = 0
save_list = []
damage = 0
while main == 0:
    try:
        operation = int(input('\nReset Tables = 0\n'    
                      'Selection Weapons/Targets = 1\n'
                      'Select Skills = 2\n'
                      'Calculate Combo Damage = 3\n'
                      'Exit = 9\n'
                      'Which Operation would you like to perform?: '))
    except:
        print('Invalid Input. Try again')
        continue
    if operation == 0:
        create_table()
        load_table()
        continue
    elif operation == 1:
        weapon = str(input('what weapon are you using?: '))
        weapon_call = call('weapon.db', 'weapon', weapon, 'none')
        if len(weapon_call) == 0:
            print(weapon + ' is an invalid input. Try again.')
            continue
        monster = str(input('what monster are you hunting?: '))
        part = str(input('what part are you hitting?: '))
        monster_call = call('monster.db', 'monster', monster, part)
        if len(monster_call) == 0:
            print(monster + ' is an invalid input. Try again.')
            continue
        values_flag = 1
    elif operation == 2:
        saved_list = []
        try:
            loops = int(input('how many skills are you using?: '))
        except:
            print('Invalid skill count. Try again')
            continue
        for i in range(loops):
            skills = str(input('what skills are you using?: '))
            skills_call = call('skills.db', 'skills', skills, 'none')
            if len(skills_call) == 0:
                print(skills + ' is an invalid input. Try again.')
                continue
            saved_list.append(skills)
        skills_flag = 1
        continue
    elif operation == 3 and values_flag == 1:
        damage = 0
        try:
            length = int(input('how many moves are you using?: '))
        except:
            print('Invalid move count. Try again')
            continue
        for k in range(length):
            motion = str(input('what motion are you using?: '))
            motion_call = call('motion.db', 'motion', motion, 'none')
            if len(motion_call) == 0:
                print(motion + ' is an invalid input. Try again.')
                continue
            elif skills_flag == 1:
                damage += damage_calc(weapon, motion, monster, part, saved_list)
            else:
                damage += damage_calc(weapon, motion, monster, part, 'none')
        print('Total Damage is: ', int(damage))
    elif operation == 9:
        main = 1
    else:
        print('Input your weapon and monster')
